
import os
import gspread
import logging
import requests
import base64
from datetime import datetime, timedelta, timezone
from oauth2client.service_account import ServiceAccountCredentials

def save_credentials_from_env():
    encoded_creds = os.getenv("CREDENTIALS_JSON")
    if not encoded_creds:
        raise Exception("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è CREDENTIALS_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    decoded = base64.b64decode(encoded_creds).decode("utf-8")
    with open("credentials.json", "w") as f:
        f.write(decoded)

save_credentials_from_env()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID") or "-1001517811601"
TELEGRAM_THREAD_ID = 8282
USE_DESK_TOKEN = os.getenv("USE_DESK_TOKEN")

SPREADSHEET_ID = '1JeYJqv5q_S3CfC855Tl5xjP7nD5Fkw9jQXrVyvEXK1Y'
SOURCE_SHEET = 'unique drivers main'
TARGET_SHEET = 'NO_REQUIRED_PERMISSIONS'

def extract_position(name):
    parts = name.strip().split()
    return " ".join(parts[1:3]) if len(parts) >= 3 else name.strip()

def get_ticket_status(ticket_id, token):
    try:
        resp = requests.post("https://api.usedesk.ru/ticket", json={
            "api_token": token,
            "ticket_id": ticket_id
        })
        return resp.json().get("ticket", {}).get("status_id")
    except:
        return None

def send_telegram_notification(tin, ticket_url, target_ws, row_num, target_header):
    if not TELEGRAM_TOKEN:
        logger.warning("‚ö†Ô∏è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É")
        return

    text = (
        f"‚ôøÔ∏è –û—à–∏–±–∫–∞ —É –∫–ª–∏–µ–Ω—Ç–∞:\n"
        f"–ò–ò–ù: {tin}\n"
        f"–û—à–∏–±–∫–∞: NO_REQUIRED_TAXPAYER_STATE ( –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å –ò–ü )\n"
        f"–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: {ticket_url}"
    )
    resp = requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage", data={
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text,
        "message_thread_id": TELEGRAM_THREAD_ID
    })

    if resp.status_code == 200:
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        target_ws.update_cell(row_num, len(target_header), "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {resp.text}")

def main():
    logger.info("üöÄ –°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏...")

    creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive"
    ])
    client = gspread.authorize(creds)

    sheet = client.open_by_key(SPREADSHEET_ID)
    source_ws = sheet.worksheet(SOURCE_SHEET)
    target_ws = sheet.worksheet(TARGET_SHEET)

    now = datetime.now(timezone(timedelta(hours=5))).strftime("%Y-%m-%d %H:%M:%S")

    source_rows = source_ws.get_all_values()
    source_header = source_rows[0]
    source_data = source_rows[1:]

    target_rows = target_ws.get_all_values()
    target_header = target_rows[0] if target_rows else []
    if not target_header:
        target_header = source_header + ["–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", "–û–±–Ω–æ–≤–ª–µ–Ω–æ", "UseDesk", "Telegram"]
        target_ws.update("A1", [target_header])
        target_rows = [target_header]

    try:
        tin_idx = source_header.index("tin")
        name_idx = source_header.index("name")
        phone_idx = source_header.index("phone")
        esf_idx = source_header.index("–°—Ç–∞—Ç—É—Å –≠–°–§")
    except ValueError as e:
        raise Exception("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ") from e

    # üîç –ö–æ–ø–∏—Ä—É–µ–º –≤ NO_REQUIRED_PERMISSIONS —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –≠–°–§ = NO_REQUIRED_PERMISSIONS
    target_tin_set = {r[tin_idx].strip() for r in target_rows[1:] if len(r) > tin_idx}

    for row in source_data:
        if len(row) <= esf_idx:
            continue
        esf_status = row[esf_idx].strip()
        tin = row[tin_idx].strip()
        if esf_status == "NO_REQUIRED_PERMISSIONS" and tin not in target_tin_set:
            full_row = row + [now, "", "", ""]
            target_ws.append_row(full_row)
            logger.info(f"üì• –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –ò–ò–ù {tin}")

    # üîÅ –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ NO_REQUIRED_PERMISSIONS
    target_rows = target_ws.get_all_values()

    for i, row in enumerate(target_rows[1:], start=2):
        tin = row[tin_idx].strip() if len(row) > tin_idx else ""
        name_full = row[name_idx].strip() if len(row) > name_idx else ""
        phone = row[phone_idx].strip().replace("+", "").replace(" ", "") if len(row) > phone_idx else ""
        esf_status = row[esf_idx].strip() if len(row) > esf_idx else ""
        usedesk_link = row[-2].strip() if len(row) >= len(target_header) - 1 else ""
        telegram_status = row[-1].strip().lower() if len(row) >= len(target_header) else ""

        logger.info(f"üîç –°—Ç—Ä–æ–∫–∞ {i}: –ò–ò–ù={tin}, –≠–°–§={esf_status}, phone={phone}")

        if not tin or not phone or not name_full:
            logger.info("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: –ø—É—Å—Ç–æ–π tin, phone –∏–ª–∏ name")
            continue
        if esf_status != "NO_REQUIRED_PERMISSIONS":
            logger.info(f"‚õî –ü—Ä–æ–ø—É—â–µ–Ω–æ: —Å—Ç–∞—Ç—É—Å –≠–°–§ = {esf_status}, –Ω—É–∂–µ–Ω NO_REQUIRED_PERMISSIONS")
            continue
        if usedesk_link and telegram_status == "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ":
            logger.info("‚è© –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ‚Äî UseDesk –∏ Telegram –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            continue

        try:
            resp = requests.post("https://api.usedesk.ru/clients", json={
                "api_token": USE_DESK_TOKEN,
                "query": phone,
                "search_type": "partial_match"
            })
            res_json = resp.json()
            clients = res_json.get("clients", []) if isinstance(res_json, dict) else res_json
            client_data = next((c for c in clients if phone in c.get("phone", "").split(",")), None)

            if not client_data:
                logger.warning(f"‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É {phone}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            client_id = client_data["id"]
            logger.info(f"üü¢ –ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç: ID {client_id}")

            requests.post("https://api.usedesk.ru/update/client", json={
                "api_token": USE_DESK_TOKEN,
                "client_id": client_id,
                "name": f"–ò–ò–ù {tin}",
                "position": extract_position(name_full)
            })

            tickets = client_data.get("tickets", []) if client_data else []
            if tickets:
                oldest_ticket = min(tickets)
                status = get_ticket_status(oldest_ticket, USE_DESK_TOKEN)
                logger.info(f"üìé –°—Ç–∞—Ä—ã–π —Ç–∏–∫–µ—Ç: {oldest_ticket}, —Å—Ç–∞—Ç—É—Å: {status}")
                if status and int(status) != 3:
                    requests.post("https://api.usedesk.ru/update/ticket", json={
                        "api_token": USE_DESK_TOKEN,
                        "ticket_id": oldest_ticket,
                        "subject": "OscarSigmaIP"
                    })
                    requests.post("https://api.usedesk.ru/create/comment", json={
                        "api_token": USE_DESK_TOKEN,
                        "ticket_id": oldest_ticket,
                        "message": "SIGMA IP",
                        "type": "public",
                        "from": "client"
                    })
                    ticket_url = f"https://secure.usedesk.ru/tickets/{oldest_ticket}"
                    target_ws.update_cell(i, len(target_header) - 1, ticket_url)
                    send_telegram_notification(tin, ticket_url, target_ws, i, target_header)
                    logger.info(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª—ë–Ω —Ç–∏–∫–µ—Ç {oldest_ticket}")
                else:
                    logger.warning(f"‚ö†Ô∏è –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π")
            else:
                logger.warning(f"üì≠ –£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤ ‚Äî –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {tin}: {e}")

    logger.info("‚úÖ –ì–æ—Ç–æ–≤–æ!")

if __name__ == "__main__":
    main()
